
# Git
- .git 폴더가 위치한 곳의 모든 내용을 관리해주는 프로그램
- .git 폴더를 추가해 관리를 시작한 곳을 레포지토리(Repository)라고 부른다
- .git 폴더에는 해당 레포지토리의 모든 정보가 기록된다 (변경 이력, 복원 지점, 버전 등..)
- .git 내부의 정보를 이용해 해당 레포지토리를 예전 모습으로 되돌릴 수 있다
- Git은 레포지토리 내부의 아주 작은 변화도 알아채고 관리해준다
- Eclipse에 내장된 Git을 사용할 수도 있다

# Eclipse에서 Git관리 메뉴 열기
- Window -> Show View -> Other... -> Git -> 원하는 거 선택하기

# 새 프로젝트로 레포지토리 만들기
- 새 프로젝트 생성 -> 우클릭 -> Team -> Share project -> 위치 선택 후 레포지토리로 변환
- 원래 java-workspace에 있던 프로젝트가 레포지토리로 이동된다 .git의 관리를 받기 시작한다

# Commit
- 레포지토리의 현재 상태를 확정짓는 명령어
- 언제든지 체크 아웃을 통해 레포지토리를 커밋한 시점으로 돌아갈 수 있다
- 원하는 브랜치 선택 후 우클릭 -> show in -> history에서 여태까지의 커밋 이력을 볼 수 있다

# staged와 unstaged 상태
- 가장 최근 커밋 이후로 변경사항이 있는 파일들은 모두 unstaged 상태가 된다
- 개발자는 unstaged 상태에 있는 파일들 중 이번 커밋에 확정짓고 싶은 파일들만 선택하여
  staged 상태로 변경할 수 있다
- 아직 미완성인 파일들은 unstaged 상태로 두어 커밋에 포함시키지 않는 것이 좋다
- 커밋은 저장처럼 너무 자주하는 것이 아니고 프로젝트에 확실한 변경점이 생겼을 때마다
  한번씩 진행하는 것이 좋다
  
# history
- 해당 레포지토리의 변경 이력을 볼 수 있는 명령어
- 이클립스에서는 레포지토리 내부의 해당 파일을 클릭하기만 해도 해당 파일의 history를 볼 수 있다
- HEAD는 현재 작업하고 있는 커밋을 의미한다
- history를 보고 원하는 커밋을 선택하여 체크 아웃을 진행할 수 있다
  (체크 아웃 진행시 커밋되지 않은 모든 변경 사항은 사라지므로 주의해야 한다)
- 과거 시점으로 돌아간 상태일 때 미래의 커밋이 있는 경우 
  코드를 수정한 후 다른 커밋을 생성하면 원래 시점의 커밋을 잃어버리게 된다
  
# .gitignore
- 레포지토리에서 관리하고 싶지 않은 파일 또는 폴더의 목록을 적어놓는 곳
- 이곳에 적어둔 파일들은 스테이지에 올라가지 않는다
- 보통은 사용하는 프로그래밍 언어의 컴파일 결과물,  
  프로젝트 설정 파일, 리소스 등을 제외하는데 사용한다
 
# branch
- 하나의 레포지토리를 다양한 버전으로 보관할 수 있는 기능
- 하나의 커밋으로부터 여러 갈래의 커밋으로 갈라진 다양한 버전을 관리하기 위해 사용된다
- 다수의 개발자가 하나의 레포지토리에서 작업하기 위해 많이 사용된다
- 다른 커밋으로 변경하는 것도 체크 아웃이고
  다른 브랜치로 변경하는 명령어도 체크 아웃이라고 한다
- 다른 브랜치로 변경할 때도 커밋으로 보관되지 않은 모든 변경 사항은 사라지게 된다

# merge
- 하나의 브래친에 다른 브랜치의 내용을 합치면서 새로운 커밋을 생성하는 명령어
- 현재 체크 아웃되어있는 브랜치에 다른 브랜치를 merge하여 합치게 된다
- 자신의 과거에 포함되어있는 브랜치에 merge 하는 경우 fast-forward(빨리감기)
  merge가 되어 과거의 브랜치를 현재로 땡겨오기만 한다
- merge 하려는 두 브랜치에 같은 부분에 대한 다른 버전이 존재하는 경우 충돌이 발생하게 된다
- 충돌이 발생하면 머지가 중단되고 해당 충돌을 완전히 해결한 후에 마저 커밋을 진행하면
  머지가 마무리 된다
  
# Github
- Git은 다른 컴퓨터에 존재하는 레토지포리(원격 레포지토리)를 다운받거나
  현재 컴퓨터에 존재하는 레포지토리(로컬 레포지토리)를 다른 컴퓨터에 업로드하는 기능을 제공한다
- 팀 단위로 프로젝트를 진행하는 경우 하나의 원격 레포지토리를 생성하고
  해당 레포지토리를 각자의 로컬로 다운받아 사용하게 된다
- Github는 레포지토리를 대신 보관해주는 웹사이트일 뿐이다 (Git의 공식 페이지가 아니다)

# clone
- 원격 레포지토리를 로컬에 그대로 복사해 가져오는 것

# push
- 로컬 레포지토리에서 커밋한 새로운 내용을 원격 레포지토리에 업로드하는 것

# pull
- 원격 레포지토리의 업데이트된 내용을 로컬로 가져오는 것 